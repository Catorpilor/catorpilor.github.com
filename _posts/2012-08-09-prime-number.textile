---
layout: post
title: Prime number
date: 2012-08-09 14:40
post-link:
tags:
- algorithm
- prime number
---

p. ["stackflow":http://stackoverflow.com/questions/453793/which-is-the-fastest-algorithm-to-find-prime-numbers]上面有个很有趣的问题，问最快的计算素数的算法是哪个？楼下有人提到了[*{color:yellow}"Sieve of Atkin":http://en.wikipedia.org/wiki/Sieve_of_Atkin*],该算法比[_{color:red}"Sieve of Eratosthenes":http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes_]要快。

p. 我自己对后者较熟悉，因为在早些时候看到过这个算法[_(汗啊，以前不知道是叫这个名)_]，今天在wiki上重温了后对该算法又有了较深的认识。

p=. !http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif!

h4. Algorithm description

p. To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:

# Create a list of consecutive integers from 2 to n: (2, 3, 4, ..., n).
# Initially, let p equal 2, the first prime number.
# Starting from p, count up in increments of p and mark each of these numbers greater than p itself in the list. These numbers will be 2p, 3p, 4p, etc.; note that some of them may have already been marked.
# Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let p now equal this number (which is the next prime), and repeat from step 3.

p((. *As a refinement, it is sufficient to mark the numbers in step 3 starting from p2, as all the smaller multiples of p will have already been marked at that point. This means that the algorithm is allowed to terminate in step 4 when p2 is greater than n.*

p((. _Another refinement is to initially list odd numbers only, (3, 5, ..., n), and count up using an increment of 2p in step 3, thus marking only odd multiples of p greater than p itself. This actually appears in the original algorithm. This can be generalized with wheel factorization, forming the initial list only from numbers coprime with the first few primes and not just from odds, i.e. numbers coprime with 2_

h4. Algorithm complexity

p. 时间复杂度为[**{color:red}O(nloglogn)**],空间复杂度为O(n).

h4. 实现

p. pseudocode:

bc.. Input: n (n>1)
Let A be the array of bool values and initially set to true
for i: 3->sqrt(n) i+=2
	if A[i] is true:
		for j: i*i, i*i+2i, i*i+4i, ..., n:
			A[i] : false
Now all i such that A[i] is true are prime.

bq. 最近在leetcode上面读了关于palindrome的一些blog，对如何找出maxlen palindrome substring以及判断一个数是否是palindrome number都有了较深的认识，会在下一篇blog中写一些学习笔记！ 




bq>. Chris

